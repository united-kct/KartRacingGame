// <auto-generated />
#pragma warning disable CS0105
using Common.Schema;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace Generated.MasterData.Tables
{
   public sealed partial class FrictionTable : TableBase<Friction>, ITableUniqueValidate
   {
        public Func<Friction, string> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<Friction, string> primaryIndexSelector;

        readonly Friction[] secondaryIndex0;
        readonly Func<Friction, string> secondaryIndex0Selector;

        public FrictionTable(Friction[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Id;
            this.secondaryIndex0Selector = x => x.TagName;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.StringComparer.Ordinal);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<Friction> SortByTagName => new RangeView<Friction>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);

        public Friction FindById(string key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, true);
        }
        
        public bool TryFindById(string key, out Friction result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, out result);
        }

        public Friction FindClosestById(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<Friction> FindRangeById(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.StringComparer.Ordinal, min, max, ascendant);
        }

        public Friction FindByTagName(string key)
        {
            return FindUniqueCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, key, true);
        }
        
        public bool TryFindByTagName(string key, out Friction result)
        {
            return TryFindUniqueCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, key, out result);
        }

        public Friction FindClosestByTagName(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<Friction> FindRangeByTagName(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "Id", resultSet);       
            ValidateUniqueCore(secondaryIndex0, secondaryIndex0Selector, "TagName", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(Friction), typeof(FrictionTable), "friction",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(Friction).GetProperty("Id")),
                    new MasterMemory.Meta.MetaProperty(typeof(Friction).GetProperty("TagName")),
                    new MasterMemory.Meta.MetaProperty(typeof(Friction).GetProperty("FrictionalAcceleration")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Friction).GetProperty("Id"),
                    }, true, true, System.StringComparer.Ordinal),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Friction).GetProperty("TagName"),
                    }, false, true, System.StringComparer.Ordinal),
                });
        }

#endif
    }
}